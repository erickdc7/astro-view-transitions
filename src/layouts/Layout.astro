---
interface Props {
	title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Astro description" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
		<meta name="view-transition" content="same-origin">
	</head>
	<body>
		<div id="content">
			<slot />
		</div>
	</body>
</html>
<style is:global>
	:root {
		--accent: 136, 58, 234;
		--accent-light: 224, 204, 250;
		--accent-dark: 49, 10, 101;
		--accent-gradient: linear-gradient(
			45deg,
			rgb(var(--accent)),
			rgb(var(--accent-light)) 30%,
			white 60%
		);
	}
	html {
		font-family: system-ui, sans-serif;
		background-color: #f6f6f6;
	}
	code {
		font-family:
			Menlo,
			Monaco,
			Lucida Console,
			Liberation Mono,
			DejaVu Sans Mono,
			Bitstream Vera Sans Mono,
			Courier New,
			monospace;
	}
</style>

<script>
	if (document.startViewTransition) {
		window.navigation.addEventListener('navigate',(event)=> {
			const toUrl = new URL(event.destination.url)

			// Es una página externa ? Si es así, lo ignoramos
			if (location.origin !== toUrl.origin) return

			// Si es una navegación en el mismo dominio (origen)
			event.intercept({
				async handler() {
					// Vamos a cargar la página de destino
					// utilizando un fetch para obtener el HTML
					const response = await fetch(toUrl.pathname) // clean-code
					const text = await response.text()
					// quedarnos solo con el contenido del HTML dentro de la etiqueta body
					// usamos un regex para extraer
					const [, data] = text.match(/<body>([\s\S]*)<\/body>/i)

					// Utilizar la View Transitions API
					document.startViewTransition(() => {
						// El scroll hacia arriba del todo
						document.body.innerHTML = data
						document.documentElement.scrollTop = 0
					})
				}
			})
		})
	}
</script>